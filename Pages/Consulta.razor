@page "/consulta"
@inject IToastService toastService
@inject ILogger<Consulta> logger
@inject NavigationManager navManager

<div class="card shadow-lg">
    <div class="card-header">
        <h1 class="card-title">Consulta de productos</h1>
    </div>
    <div class="card-body">
        <div class="d-flex w-50 align-items-end">
            <div>
                <label class="form-label" style="font-size:14px;">Filtro</label>
                <select class="form-select" style="font-size:14px;"
                    @onchange="args => { _filtro = args.Value as string; logger.LogInformation(_filtro);}">
                    <option value="desc">Descripci√≥n</option>
                    <option value="id">ID</option>
                </select>
            </div>
            <input type='@(_filtro == "id" ? "number" : "text")' @onchange="args => _busqueda = args.Value as string"
                class="form-control ms-4" />
            <button @onclick="Filtrar" class="btn btn-primary ms-2">Buscar</button>
        </div>
        <table class="table table-light table-striped table-bordered table-hover mt-4">
            <thead>
                <tr>
                    <th scope='col' class="">
                        ID
                    </th>
                    <th scope='col' class="">
                        Descripcion
                    </th>
                    <th scope='col' class="">
                        Existencia
                    </th>
                    <th scope='col' class="">
                        Costo
                    </th>
                    <th scope='col' class="">
                        Valor Inventario
                    </th>
                    <th scope='col' class="">
                        Ganancia
                    </th>
                    <th scope='col' class="">
                        Precio
                    </th>
                    <th></th>
                </tr>
            </thead>

            <tbody>
                @foreach (var producto in this._productos)
                {
                    <tr>
                        <td>@producto.ProductoId</td>
                        <td>@producto.Descripcion</td>
                        <td>@producto.Existencia</td>
                        <td>@producto.Costo</td>
                        <td>@producto.ValorInventario</td>
                        <td>@producto.Ganancia</td>
                        <td>@producto.Precio</td>

                        <td>
                            <span class="oi oi-pencil text-primary me-2" aria-hidden='true' title='edit'
                            @onclick='args => navManager.NavigateTo("/registro/" + producto.ProductoId)' />
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    private List<Productos> _productos = new List<Productos>();

    [Inject]
    public ProductosBLL? productosBLL { get; set; }
    public string? _filtro { get; set; }
    public string? _busqueda { get; set; }
    protected override void OnInitialized()
    {
        base.OnInitialized();
        this._productos = productosBLL.GetList(p => true);
    }

    private void Delete(int id)
    {
        Debug.WriteLine("Eliminando producto con el id: " + id);

        toastService.ShowSuccess("Deleted successfully");
    }

    private void Filtrar()
    {


        if (_busqueda is null)
        {
            _productos = productosBLL.GetList(p => true);
        }
        else
        {
            switch (_filtro)
            {
                case "id":
                    int id = int.TryParse(_busqueda, out id) ? id : 0;
                    if (id <= 0)
                    {
                        toastService.ShowError("ID no valido");
                        break;
                    }
                    _productos = productosBLL.GetList(p => p.ProductoId == id);
                    break;
                case "desc":
                    _productos = productosBLL.GetList(p => p.Descripcion.Contains(_busqueda));
                    break;
            }

        }
    }
}